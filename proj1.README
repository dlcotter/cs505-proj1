The technical architecture of this project is quite simple. There is only one form, from which a user ID may be selected, attribute fields for first name, last name, age, and sex, and four 'write-only' checkboxes for the compartments. I say 'write-only' because these fields are used in an INSERT statement; they do not affect the results that a user sees on hitting SELECT.

I have included seven user IDs (G, GT, GF, GH, GFT, GFH, and GFTH) representing all possible combinations of security compartments so that the application may be tested easily. Obviously in a real business scenario there would be a much stricter security layer, but since this project is only for illustration of a concept, I thought this was a justified simplification.

I tested this as I went, until I was satisfied that it met all the "features" described in the spec. I would have written out automated test cases, but since one of the requirements was that it was done as a GUI, that was not feasible. Essentially, my method of testing was to read and reread the spec and test each individual requirement with several permutations of possible input until I was satisfied that it met the requirement.

I chose to do this project in Python and MySQL because I have always worked in the Microsoft world and wanted to play around with some new languages and technologies. The hardest part for me was writing the UPDATE and DELETE queries, because the syntax for updating or deleting one table while joining to a second table which you do not wish to delete or update is a bit confusing, but I found a few examples in the MySQL documentation that helped. The other tricky part was figuring out how to test for authentication of a user on a record, but the information on "domination" cleared that part up. I wrote the update and delete queries with the same logic to be consistent.

